/*****************************************
 * (This comment block is added by the Judge System)
 * Submission ID: 83071
 * Submitted at:  2019-04-25 11:42:28
 *
 * User ID:       335
 * Username:      54780828
 * Problem ID:    314
 * Problem Name:  Extend to Palindromes (UVa 11475)
 */

#include<vector>
#include<iostream>
#include<algorithm>
#include<string>
using namespace std;
vector<int> find_substring(string pattern, string text)

{

	int n = pattern.size();

	vector<int> next(n + 1, 0);

	for (int i = 1; i < n; i++)

	{

		int j = i;

		while (j > 0)

		{

			j = next[j];

			if (pattern[j] == pattern[i])

			{

				next[i + 1] = j + 1;

				break;

			}

		}

	}

	vector<int> positions;

	int m = text.size();

	for (int i = 0, j = 0; i < m; ++i)

	{

		if (j < n&&text[i] == pattern[j])

		{

			j++;

		}

		else

		{

			while (j > 0)

			{

				j = next[j];

				if (text[i] == pattern[j])

				{

					j++;

					break;

				}

			}

		}

		if (j == n)

		{

			positions.push_back(i - n + 1);

		}

	}

	return positions;

}
int main() {

	string txt;

	while (getline(cin, txt)) {
		string s;
		s.clear();
		int t = 0;
		int leng = txt.size();
		for (int i = leng - 1; i >= 0; i--) {
			s += txt[i];
			t++;
		}
		int  flag=false;
		for (int i = 0; i < leng; i++) {
			if (txt.substr(i, leng -i) == s.substr(0, leng - i)) {
				cout << txt;
				cout << s.substr(leng - i, i) << endl;
				flag = true;
				break;
			}
		}

	}


}